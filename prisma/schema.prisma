generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserModel {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  username  String        @unique
  email     String        @unique
  password  String
  role      Role          @default(USER)
  cards     CardModel[]
  lists     ListModel[]
  profile   ProfileModel?
  VoteModel VoteModel[]
}

model ProfileModel {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  firstName String?
  lastname  String?
  bio       String?
  avatar    String?
  user      UserModel @relation(fields: [userId], references: [id])
  userId    Int       @unique
}

model CardModel {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  title          String
  img            String?
  description    String?
  author         UserModel         @relation(fields: [authorId], references: [id])
  authorId       Int
  status         Status
  externalId     String?
  // metadata    String[]
  ListCardsModel ListsCardsModel[]
}

model CategoryModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  // ListModel ListModel[]
}

model ListModel {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  title          String
  img            String?
  description    String?
  author         UserModel         @relation(fields: [authorId], references: [id])
  authorId       Int
  // category       CategoryModel     @relation(fields: [categoryId], references: [id])
  // categoryId     Int
  status         Status
  ListCardsModel ListsCardsModel[]
}

model ListsCardsModel {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  list        ListModel     @relation(fields: [listId], references: [id])
  listId      Int
  card        CardModel     @relation(fields: [cardId], references: [id])
  cardId      Int
  VoteModel   VoteModel[]
  RatingModel RatingModel[]

  @@unique([listId, cardId])
  @@index([listId, cardId])
}

model VoteModel {
  id               Int             @id @default(autoincrement())
  createAt         DateTime        @default(now())
  cardListRelation ListsCardsModel @relation(fields: [listsCardId], references: [id])
  listsCardId      Int
  user             UserModel       @relation(fields: [userId], references: [id])
  userId           Int
  value            ValueVote
}

model RatingModel {
  id               Int             @id @default(autoincrement())
  createAt         DateTime        @default(now())
  value            Float
  cardListRelation ListsCardsModel @relation(fields: [listsCardId], references: [id])
  listsCardId      Int
}

enum Status {
  ACTIVE
  MODERATION
  INACTIVE
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum ValueVote {
  UP
  DOWN
}
